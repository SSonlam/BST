===================================================================
Recommended Usage: ./simplecompile.sh > output.txt 2>&1
===================================================================
Mon Jan 27 23:05:17 PST 2020
Linux uw1-320-02 4.9.0-9-amd64 #1 SMP Debian 4.9.168-1+deb9u5 (2019-08-11) x86_64 GNU/Linux
uid=863755(ssonlam) gid=2120863755(ssonlam) groups=2120863755(ssonlam),605559(lab-access)
===================================================================
*** compiling with clang++ to create an executable called myprogram
===================================================================
clang version 3.8.1-24 (tags/RELEASE_381/final)
Target: x86_64-pc-linux-gnu
Thread model: posix
InstalledDir: /usr/bin
In file included from ./bsttest.cpp:19:
./bst.hpp:50:38: warning: unused parameter 'N' [-Wunused-parameter]
    static int getHeight(const Node *N) {
                                     ^
1 warning generated.
===================================================================
*** running myprogram
Starting testPisan01
* Testing == and !=
Ending testPisan01
Starting testPisan02
* Testing == and != with more detail
Ending testPisan02
Starting testPisan03
* Testing traversal
Visual check B1:
                x
            g
        f
    c
        a


Ending testPisan03
Starting testSample01
Ending testSample01
Done!
===================================================================
*** running clang-tidy using options from .clang-tidy
LLVM (http://llvm.org/):
  LLVM version 3.8.1
  
  Optimized build.
  Built Jun  2 2017 (13:11:29).
  Default target: x86_64-pc-linux-gnu
  Host CPU: ivybridge
18388 warnings generated.
28738 warnings generated.
/home/NETID/ssonlam/bst.hpp:50:38: warning: parameter 'N' is unused [misc-unused-parameters]
    static int getHeight(const Node *N) {
                                     ^
                                      /*N*/
/home/NETID/ssonlam/bst.hpp:153:5: warning: use '= default' to define a trivial default constructor [modernize-use-default]
    BST() {
    ^
          = default;
/home/NETID/ssonlam/bst.hpp:188:20: warning: redundant boolean literal in conditional return statement [readability-simplify-boolean-expr]
            return true;
                   ^
/home/NETID/ssonlam/bst.hpp:290:26: warning: invalid case style for variable 'tempPtr' [readability-identifier-naming]
                    auto tempPtr = new Node();
                         ^
/home/NETID/ssonlam/bst.hpp:304:9: warning: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto]
        Node* Current = new Node();
        ^
        auto 
/home/NETID/ssonlam/bst.hpp:489:13: warning: don't use else after return [readability-else-after-return]
            else {
            ^
/home/NETID/ssonlam/bsttest.cpp:42:25: warning: construction of 'SS' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
    static stringstream SS;
                        ^
/usr/lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/sstream:690:7: note: possibly throwing constructor declared here
      basic_stringstream(ios_base::openmode __m = ios_base::out | ios_base::in)
      ^
/home/NETID/ssonlam/bsttest.cpp:67:27: warning: construction of 'SS' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
stringstream TreeVisitor::SS;
                          ^
/usr/lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/sstream:690:7: note: possibly throwing constructor declared here
      basic_stringstream(ios_base::openmode __m = ios_base::out | ios_base::in)
      ^
Suppressed 28727 warnings (28727 in non-user code).
Use -header-filter=.* to display errors from all non-system headers.
===================================================================
*** ERROR clang-format is not available on this system
===================================================================
*** running valgrind to detect memory leaks
==14043==     in use at exit: 0 bytes in 0 blocks
===================================================================
*** compiling with clang++ to checking for memory leaks
===================================================================
*** running myprogram with memory checking
Starting testPisan01
* Testing == and !=
Ending testPisan01
Starting testPisan02
* Testing == and != with more detail
Ending testPisan02
Starting testPisan03
* Testing traversal
Visual check B1:
                x
            g
        f
    c
        a


Ending testPisan03
Starting testSample01
Ending testSample01
Done!
===================================================================
*** using --analyze option for clang++ to detect issues
===================================================================
*** cleaning up, deleting myprogram
===================================================================
Mon Jan 27 23:05:26 PST 2020
===================================================================
Exiting with 0
